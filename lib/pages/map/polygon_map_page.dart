import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';

class PolygonMapPage extends StatefulWidget {
  @override
  _PolygonMapPageState createState() => _PolygonMapPageState();
}

class _PolygonMapPageState extends State<PolygonMapPage> {
  late GoogleMapController _mapController;

  final List<LatLng> _polygonPoints1 = [
    LatLng(41.2995, 69.2401),
    LatLng(41.3010, 69.2450),
    LatLng(41.3040, 69.2420),
    LatLng(41.3020, 69.2380),
  ];
  final List<LatLng> chilonzorTumaniPolygon = [
    LatLng(41.22842180106862, 69.17968791013546),
    LatLng(41.235091320668595, 69.16489944059235),
    LatLng(41.2520028494369, 69.16151201695537),
    LatLng(41.261261525002304, 69.14961173751816),
    LatLng(41.26847057692306, 69.16445022535662),
    LatLng(41.278534714233054, 69.19756538723998),
    LatLng(41.28139047056017, 69.1941272010335),
    LatLng(41.302872630184154, 69.19376528669598),
    LatLng(41.30183217664935, 69.22235107756431),
    LatLng(41.30007101047217, 69.23010531508423),
    LatLng(41.31145001424904, 69.24110551249619),
    LatLng(41.311043655450824, 69.25967961632297),
    LatLng(41.30481250337026, 69.25408935206443),
    LatLng(41.29465173931466, 69.24092518139108),
    LatLng(41.28055952710412, 69.23371193718651),
    LatLng(41.26537989480865, 69.21910511767226),
    LatLng(41.253043844622866, 69.21531816446486),
    LatLng(41.23636613930207, 69.18844882744412),
    LatLng(41.22822912894399, 69.18015359660886),
  ];

  final List<LatLng> mirzoUlugbekPoints = [
    LatLng(41.36209687494651, 69.40649697866534),
    LatLng(41.35312019071562, 69.41094259790349),
    LatLng(41.3513341058796, 69.41138089839174),
    LatLng(41.34860788191477, 69.41156874145814),
    LatLng(41.34541147395449, 69.41031645434882),
    LatLng(41.34262849272854, 69.40759097654657),
    LatLng(41.337279807327455, 69.39488803657159),
    LatLng(41.33861644139924, 69.38667814641515),
    LatLng(41.33710961990752, 69.37903288882919),
    LatLng(41.334382901645576, 69.37855505971312),
    LatLng(41.3302926106574, 69.37473243092013),
    LatLng(41.30589417205602, 69.34028143595255),
    LatLng(41.314753244221905, 69.32964569514526),
    LatLng(41.31554417427345, 69.32111604295669),
    LatLng(41.31831235387672, 69.31184926033205),
    LatLng(41.311905816573265, 69.30732117336774),
    LatLng(41.312380396485295, 69.30553099945163),
    LatLng(41.312538589021564, 69.3021612603154),
    LatLng(41.31040295739257, 69.29742256465508),
    LatLng(41.307238930085504, 69.29858091248316),
    LatLng(41.310560540381864, 69.28206180444079),
    LatLng(41.311979373360444, 69.28122228425688),
    LatLng(41.31261301972463, 69.2801472028361),
    LatLng(41.31667345472281, 69.28111559650667),
    LatLng(41.31590951939715, 69.2839861367567),
    LatLng(41.31818432266824, 69.28608818591616),
    LatLng(41.317742949142456, 69.29056351690478),
    LatLng(41.31821827436012, 69.29149022674926),
    LatLng(41.3188294016893, 69.29094776245006),
    LatLng(41.322660038703106, 69.29173295786698),
    LatLng(41.3225291071493, 69.29317750633318),
    LatLng(41.32327728391344, 69.29297825826887),
    LatLng(41.32557787364457, 69.29434808871096),
    LatLng(41.32509157701201, 69.29619113361616),
    LatLng(41.3261389808878, 69.29788474216274),
    LatLng(41.32851428086104, 69.29751115204216),
    LatLng(41.32870130867739, 69.29656472373672),
    LatLng(41.330384534864535, 69.2977353061145),
    LatLng(41.3309830048066, 69.3008236511112),
    LatLng(41.33079598354027, 69.3017451734086),
    LatLng(41.33085209010876, 69.30181989218666),
    LatLng(41.33330202403634, 69.3015957381143),
    LatLng(41.33614457998854, 69.30259197843583),
    LatLng(41.33917400964534, 69.30737393197909),
    LatLng(41.338987011895135, 69.30964037871054),
    LatLng(41.332030314108486, 69.31355062197247),
    LatLng(41.33423708909602, 69.31691293368183),
    LatLng(41.33601367560002, 69.31681330964967),
    LatLng(41.3369113008809, 69.31561782126386),
    LatLng(41.33861301485279, 69.31569253928798),
    LatLng(41.339398471226126, 69.31688750886991),
    LatLng(41.34022410858021, 69.31716242609878),
    LatLng(41.34202253406175, 69.3189020669451),
    LatLng(41.35120829939331, 69.32663997496265),
    LatLng(41.35093399987205, 69.33344054176864),
    LatLng(41.35637969701607, 69.34522763287853),
    LatLng(41.35530965742895, 69.35571411759172),
    LatLng(41.36249816431023, 69.36340028009248),
    LatLng(41.36140659670845, 69.37586637887203),
    LatLng(41.36639696026103, 69.39489878125487),
    LatLng(41.35691952110328, 69.39569179802082),
    LatLng(41.362061987090925, 69.40634190474022),
  ];

  final List<LatLng> sergeliTumaniPolygon = [
    LatLng(41.16863833653141, 69.2289851371124),
    LatLng(41.1736132119261, 69.2120764926404),
    LatLng(41.187566690289096, 69.21765548700934),
    LatLng(41.187246866385166, 69.20791966878379),
    LatLng(41.19340420331791, 69.2030964635517),
    LatLng(41.19042282827384, 69.1960339130333),
    LatLng(41.19476522069813, 69.19508649771986),
    LatLng(41.19269127815904, 69.18983264916348),
    LatLng(41.19677428987544, 69.18922974850948),
    LatLng(41.20028052442156, 69.19698271677612),
    LatLng(41.209433169755876, 69.18967094016746),
    LatLng(41.22666214257382, 69.20024838921118),
    LatLng(41.24609910886416, 69.21782445055342),
    LatLng(41.25238727016293, 69.21677932477759),
    LatLng(41.25195319656157, 69.21549628550501),
    LatLng(41.24838403760077, 69.21530382961411),
    LatLng(41.24481468365726, 69.20895278521485),
    LatLng(41.24240284764035, 69.20670746648781),
    LatLng(41.238157800052804, 69.20157530939748),
    LatLng(41.236318506042714, 69.20056826892703),
    LatLng(41.233486336911525, 69.19788853363919),
    LatLng(41.23016382825983, 69.1945569708489),
    LatLng(41.2251592007145, 69.1912906501622),
    LatLng(41.222505871681804, 69.18869999395753),
    LatLng(41.22234003504269, 69.18644005982155),
    LatLng(41.219769513360255, 69.18588885637374),
    LatLng(41.216701339094904, 69.18809367016495),
    LatLng(41.21558183426935, 69.1857234953394),
    LatLng(41.212306136030634, 69.1862746987872),
    LatLng(41.208346338285075, 69.18322971530327),
    LatLng(41.20890831343874, 69.18047158295676),
    LatLng(41.21478715022183, 69.17116288963618),
    LatLng(41.222974946657885, 69.17433758378442),
    LatLng(41.23627985706547, 69.18788380006428),
    LatLng(41.2548674735826, 69.21802111919085),
    LatLng(41.26234895954786, 69.23448867518009),
    LatLng(41.26753806172501, 69.26256935965216),
    LatLng(41.27157821464722, 69.28278040631231),
    LatLng(41.27055248664181, 69.28682405271795),
    LatLng(41.26549959125343, 69.29309170464668),
    LatLng(41.26443577394397, 69.29738807965698),
    LatLng(41.26310597797486, 69.29759026197726),
    LatLng(41.26196613130519, 69.30244263766404),
    LatLng(41.2645852090111, 69.30851717873286),
    LatLng(41.26097570806731, 69.31069063867588),
    LatLng(41.25720029605997, 69.30220512923162),
    LatLng(41.25247201577352, 69.30215440817018),
    LatLng(41.244277196653464, 69.30165909533673),
    LatLng(41.20357245520176, 69.27242153966733),
    LatLng(41.19228743110759, 69.25639200552341),
    LatLng(41.16875578087937, 69.22917353672237),
  ];

  LatLng _testPoint = LatLng(41.3000, 69.2410);
  String result = "";

  Set<Polygon> _polygons = {};

  @override
  void initState() {
    super.initState();
    _drawPolygon();
    _checkPointInsidePolygon();
  }

  void _drawPolygon() {
    final polygon = Polygon(
      polygonId: PolygonId("polygon1"),
      points: chilonzorTumaniPolygon,
      strokeWidth: 2,
      strokeColor: Colors.red,
      fillColor: Colors.red.withOpacity(0.2),
    );

    setState(() {
      _polygons.add(polygon);
    });
  }

  void _checkPointInsidePolygon() {
    bool inside = isPointInPolygon(_testPoint, chilonzorTumaniPolygon);

    setState(() {
      result = inside
          ? "✅ Koordinata poligon ichida"
          : "❌ Koordinata poligon tashqarisida";
    });
  }

  bool isPointInPolygon(LatLng point, List<LatLng> polygon) {
    int intersectCount = 0;
    for (int j = 0; j < polygon.length; j++) {
      LatLng p1 = polygon[j];
      LatLng p2 = polygon[(j + 1) % polygon.length];

      if (((p1.longitude > point.longitude) !=
          (p2.longitude > point.longitude))) {
        double atLat = (p2.latitude - p1.latitude) *
            (point.longitude - p1.longitude) /
            (p2.longitude - p1.longitude) +
            p1.latitude;
        if (point.latitude < atLat) {
          intersectCount++;
        }
      }
    }
    return (intersectCount % 2 == 1);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Polygon Map')),
      body: Stack(
        children: [
          GoogleMap(
            initialCameraPosition: CameraPosition(
              target: LatLng(41.3000, 69.2400),
              zoom: 15,
            ),
            polygons: _polygons,
            markers: {
              Marker(markerId: MarkerId("testPoint"), position: _testPoint),
            },
            onMapCreated: (controller) {
              _mapController = controller;
            },
          ),
          Positioned(
            bottom: 20,
            left: 20,
            right: 20,
            child: Container(
              padding: EdgeInsets.all(12),
              color: Colors.white,
              child: Text(
                result,
                style: TextStyle(fontSize: 16),
              ),
            ),
          ),
        ],
      ),
    );
  }
}